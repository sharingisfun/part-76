{"title":"DAS #80: ISOLATING BY SEPARATING VALUE","uid":7831448,"size":114168964,"categoryP":"video","categoryS":"other","magnet":"?xt=urn:btih:cc9faf65084ca8982fd12a6ffcc0e007a1f2ed80&amp;dn=DAS+%2380%3A+ISOLATING+BY+SEPARATING+VALUE&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":0,"leechers":0,"uploader":"splehpneb","files":1,"time":1353066446,"description":"This screencast presents a method for writing isolated tests without using stubs or mocks. We'll explicitly separate the value part of an objectÃ¢â‚¬â€its instance variablesÃ¢â‚¬â€from the behavior partÃ¢â‚¬â€its methods. Then, when testing other classes, we can integrate them only with the value part, as exposed by the accessor methods.\n\nWe avoid the danger of mocks and stubs going out of sync with the code being tested, since we're integrating with real accessor methods that will exist in the final object. We also avoid the danger of accidentally calling complex methods that shouldn't be under test: since we only test against the data part of the object, there's no risk of integration.\n\nThis method isn't universal. It falls flat on objects that are heavy on behavior and light on data. But it is one way to test against commonly-used, data-heavy classes (in the case of the Destroy All Software codebase that we work on here, the Screencast class).\n","torrent":{"xt":"urn:btih:cc9faf65084ca8982fd12a6ffcc0e007a1f2ed80","amp;dn":"DAS+%2380%3A+ISOLATING+BY+SEPARATING+VALUE","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"cc9faf65084ca8982fd12a6ffcc0e007a1f2ed80","infoHashBuffer":{"type":"Buffer","data":[204,159,175,101,8,76,168,152,47,209,42,111,252,192,224,7,161,242,237,128]},"announce":[],"urlList":[]}}