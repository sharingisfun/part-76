{"title":"RailsCast #59 - Optimistic Locking (revised)","uid":7819299,"size":16186334,"categoryP":"video","categoryS":"other","magnet":"?xt=urn:btih:07e3a8d036819cc34f4141de416fba6cc844bc6d&amp;dn=RailsCast+%2359+-+Optimistic+Locking+%28revised%29&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":0,"leechers":0,"uploader":"splehpneb","files":1,"time":1352755609,"description":"There is a chance one user will unintentionally override someone else's changes if they update a record near the same time. One solution is to use optimistic locking. The updated_at column can also be used for this as shown. (8 minutes) If you found this helpful, please consider purchasing RailsCasts Pro.","torrent":{"xt":"urn:btih:07e3a8d036819cc34f4141de416fba6cc844bc6d","amp;dn":"RailsCast+%2359+-+Optimistic+Locking+%28revised%29","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"07e3a8d036819cc34f4141de416fba6cc844bc6d","infoHashBuffer":{"type":"Buffer","data":[7,227,168,208,54,129,156,195,79,65,65,222,65,111,186,108,200,68,188,109]},"announce":[],"urlList":[]}}